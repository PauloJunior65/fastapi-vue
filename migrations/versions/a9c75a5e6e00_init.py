"""init

Revision ID: a9c75a5e6e00
Revises: 
Create Date: 2024-06-26 02:50:01.973688

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel


# revision identifiers, used by Alembic.
revision: str = 'a9c75a5e6e00'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('auth_group',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    comment='Tabela de grupos de usuários do sistema'
    )
    op.create_table('auth_permission_group',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('group', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('group'),
    comment='Tabela de grupos de permissões do sistema'
    )
    op.create_table('auth_user',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('username', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('password', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('email', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_superuser', sa.Boolean(), nullable=False),
    sa.Column('date_joined', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email'),
    comment='Tabela de usuários do sistema'
    )
    op.create_index(op.f('ix_auth_user_username'), 'auth_user', ['username'], unique=True)
    op.create_table('auth_permission',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('group_id', sa.Integer(), nullable=False),
    sa.Column('code', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.ForeignKeyConstraint(['group_id'], ['auth_permission_group.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('group_id', 'code', name='uq_group_code'),
    comment='Tabela de permissões do sistema'
    )
    op.create_table('auth_user_has_group',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('group_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.Column('added_by', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['added_by'], ['auth_user.id'], ),
    sa.ForeignKeyConstraint(['group_id'], ['auth_group.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['auth_user.id'], ),
    sa.PrimaryKeyConstraint('user_id', 'group_id'),
    comment='Tabela de usuários em grupos do sistema'
    )
    op.create_table('auth_group_has_permission',
    sa.Column('group_id', sa.Integer(), nullable=False),
    sa.Column('permission_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.Column('added_by', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['added_by'], ['auth_user.id'], ),
    sa.ForeignKeyConstraint(['group_id'], ['auth_group.id'], ),
    sa.ForeignKeyConstraint(['permission_id'], ['auth_permission.id'], ),
    sa.PrimaryKeyConstraint('group_id', 'permission_id'),
    sa.UniqueConstraint('group_id', 'permission_id', name='uq_group_permission'),
    comment='Tabela de permissões em grupos do sistema'
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('auth_group_has_permission')
    op.drop_table('auth_user_has_group')
    op.drop_table('auth_permission')
    op.drop_index(op.f('ix_auth_user_username'), table_name='auth_user')
    op.drop_table('auth_user')
    op.drop_table('auth_permission_group')
    op.drop_table('auth_group')
    # ### end Alembic commands ###
